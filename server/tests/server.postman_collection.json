{
	"info": {
		"_postman_id": "a9b32b50-c2c8-4192-95d9-f9180c304fd4",
		"name": "test-collection",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23343795"
	},
	"item": [
		{
			"name": "Customer",
			"item": [
				{
					"name": "Register as a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the new customer object schema\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.newCustomer).to.be.an('object');\r",
									"    pm.expect(responseData.newCustomer.email).to.be.a('string');\r",
									"    pm.expect(responseData.newCustomer.password).to.be.a('string');\r",
									"    pm.expect(responseData.newCustomer.name).to.be.a('string');\r",
									"    pm.expect(responseData.newCustomer.lastName).to.be.a('string');\r",
									"   \r",
									"   \r",
									"});\r",
									"pm.test(\"Registration successful\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"newCustomer\");\r",
									"    \r",
									"\r",
									"    // Save email and password for subsequent login tests\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    pm.environment.set(\"email\", requestBody.email);\r",
									"    pm.environment.set(\"password\", requestBody.password);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a unique email by appending a timestamp\r",
									"const timestamp = Date.now();\r",
									"const baseEmail = \"danesh@gmail.com\";\r",
									"const emailParts = baseEmail.split(\"@\");\r",
									"const uniqueEmail = `${emailParts[0]}+${timestamp}@${emailParts[1]}`;\r",
									"\r",
									"// Set the dynamically generated email in an environment variable\r",
									"pm.environment.set(\"dynamicEmail\", uniqueEmail);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{dynamicEmail}}\",\r\n    \"password\": \"Danesh123\",\r\n    \"name\": \"Danesh\",\r\n    \"lastName\": \"Mohammadi\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login as a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login successful\", function () { \r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"token\");\r",
									"    pm.expect(responseBody).to.have.property(\"customer\");\r",
									"\r",
									"    // Validate the customer object\r",
									"    const customer = responseBody.customer;\r",
									"    pm.expect(customer).to.have.property(\"_id\");\r",
									"    pm.expect(customer).to.have.property(\"email\");\r",
									"    pm.expect(customer).to.have.property(\"name\");\r",
									"    pm.expect(customer).to.have.property(\"lastName\");\r",
									"\r",
									"    // Save token for authenticated requests\r",
									"    pm.environment.set(\"customerId\", customer._id);\r",
									"    pm.environment.set(\"authToken\", responseBody.token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a customer by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the response schema for required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('orders');\r",
									"    pm.expect(responseData).to.have.property('_id');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('lastName');\r",
									"    pm.expect(responseData).to.have.property('__v');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 for valid password\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.eql(\"Password validation successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 401 for invalid password\", function () {\r",
									"    if (pm.response.status === 401) {\r",
									"        const response = pm.response.json();\r",
									"        pm.expect(response.message).to.eql(\"Invalid old password\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 500 for server error\", function () {\r",
									"    if (pm.response.status === 500) {\r",
									"        const response = pm.response.json();\r",
									"        pm.expect(response.message).to.eql(\"Server error\");\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the token from the environment variable\r",
									"const token = pm.environment.get(\"authToken\");\r",
									"\r",
									"if (token) {\r",
									"    // Add the token to the headers\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Token not found in environment variables\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerId\": \"{{customerId}}\",\r\n  \"oldPassword\": \"{{password}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/customers/validate-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"validate-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(function(customer) {\r",
									"        // Check that email follows a valid format\r",
									"        pm.expect(customer.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    // Check that the Content-Type header is application/json\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers?page=1&limit=3",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer's password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the token from the environment variable\r",
									"const token = pm.environment.get(\"authToken\");\r",
									"\r",
									"if (token) {\r",
									"    // Add the token to the headers\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Token not found in environment variables\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Password change responds with status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"newPassword\": \"yourNewPassword123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer's profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer profile update responds with status 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains updated customer data\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"name\"); // Replace with actual updated fields\r",
									"    pm.expect(jsonData).to.have.property(\"email\"); // Replace as needed\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the token from the environment variable\r",
									"const token = pm.environment.get(\"authToken\");\r",
									"\r",
									"if (token) {\r",
									"    // Add the token to the headers\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Token not found in environment variables\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"UpdatedName\",\r\n  \"lastName\": \"UpdatedLastName\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a customer's orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains orders array\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"orders\").that.is.an(\"array\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a customer's order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order created successfully\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.have.property(\"order\"); // Ensure order object exists\r",
									"    pm.expect(responseBody.order).to.have.property(\"_id\"); // Ensure order has an ID\r",
									"\r",
									"    // Save the order ID to the environment for later use\r",
									"    pm.environment.set(\"orderId\", responseBody.order._id);\r",
									"    console.log(\"Saved Order ID:\", pm.environment.get(\"orderId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Service Subscription\",\r\n  \"date\": \"2024-12-15\",\r\n  \"items\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}customers/{{customerId}}/orders",
							"host": [
								"{{base_url}}customers"
							],
							"path": [
								"{{customerId}}",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a customer's order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}/orders/{{orderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () { \r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the token from the environment variable\r",
									"const token = pm.environment.get(\"authToken\");\r",
									"\r",
									"if (token) {\r",
									"    // Add the token to the headers\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Token not found in environment variables\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers/{{customerId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers",
								"{{customerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 204\", function () { \r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get the token from the environment variable\r",
									"const token = pm.environment.get(\"authToken\");\r",
									"\r",
									"if (token) {\r",
									"    // Add the token to the headers\r",
									"    pm.request.headers.add({\r",
									"        key: \"Authorization\",\r",
									"        value: `Bearer ${token}`\r",
									"    });\r",
									"} else {\r",
									"    console.error(\"Token not found in environment variables\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/customers",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response time is below 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Check the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate the response status code\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"// Validate response structure and save order ID\r",
									"pm.test(\"Response has required fields and saves order ID\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('order');\r",
									"    pm.expect(responseData.order).to.have.property('_id');\r",
									"    \r",
									"    // Save order ID for next requests\r",
									"    pm.environment.set(\"NewOrderId\", responseData.order._id);\r",
									"});\r",
									"\r",
									"// Validate items array has at least one element\r",
									"pm.test(\"Items is a non-empty array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.order.items).to.be.an('array').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Weekly Groceries\",\r\n  \"date\": \"2024-12-12\",\r\n  \"items\": [\r\n    \"64b7c3fcd47e8e3f7c2a1234\",\r\n    \"64b7c3fcd47e8e3f7c2a5678\"\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get and order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('_id');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('items');\r",
									"    pm.expect(responseData).to.have.property('__v');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id should be a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Date is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{NewOrderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{NewOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Updated Order Title\",\r\n  \"date\": \"2024-12-20\",\r\n  \"items\": []\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/{{NewOrderId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{NewOrderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order's item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response contains the created item details\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"items\");\r",
									"    pm.expect(jsonData.items).to.have.property(\"_id\");\r",
									"\r",
									"    // Set the new item's ID in the environment for future use\r",
									"    pm.environment.set(\"OrderItemId\", jsonData.items._id);\r",
									"    });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"New Item\",\r\n  \"price\": \"25.99\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/orders/{{NewOrderId}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{NewOrderId}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order's items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Validate response time is below 500ms\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"// Check the response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"  const jsonData = pm.response.json();\r",
									"  pm.expect(jsonData).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{NewOrderId}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{NewOrderId}}",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order's item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders/{{NewOrderId}}/items/{{OrderItemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders",
								"{{NewOrderId}}",
								"items",
								"{{OrderItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response body is null\", function () {\r",
									"    const responseData = xml2Json(pm.response.text());\r",
									"    \r",
									"    pm.expect(responseData).to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Item",
			"item": [
				{
					"name": "Get items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of items\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('array');\r",
									"    if (response.length > 0) {\r",
									"        pm.expect(response[0]).to.have.property('name');\r",
									"        pm.expect(response[0]).to.have.property('price');\r",
									"        pm.expect(response[0]).to.have.property('averageRating');\r",
									"        pm.expect(response[0]).to.have.property('reviews');\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Average rating is a number or null\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(item => {\r",
									"        pm.expect(item.averageRating).to.satisfy(avg => typeof avg === \"number\" || avg === null);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains item object\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.property('item');\r",
									"    pm.expect(response.item).to.have.property('name');\r",
									"    pm.expect(response.item).to.have.property('price');\r",
									"    pm.expect(response.item).to.have.property('image');\r",
									"    pm.expect(response.item).to.have.property('_id');\r",
									"});\r",
									"\r",
									"pm.test(\"Name is a non-empty string\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.item.name).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"pm.environment.set(\"itemId\", response.item._id);\r",
									"pm.test(\"Item ID saved to environment\", function () {\r",
									"    pm.expect(pm.environment.get(\"itemId\")).to.exist;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n       \r\n        \"name\": \"Pen 1\",\r\n        \"price\": \"5 SEK\",\r\n        \"image\": \"https://imgur.com/U7eHkRc.png\",\r\n        \"reviews\": []\r\n        \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get item's reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/{{itemId}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post item's review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rating\": 2,\r\n  \"comment\": \"Very Good\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/{{itemId}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{itemId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n       \r\n        \"name\": \"Pen 1\",\r\n        \"price\": \"5 SEK\",\r\n        \"image\": \"https://imgur.com/U7eHkRc.png\"\r\n       \r\n       \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete item by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204, 404]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items/{{itemId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response has a valid status code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"items"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "GET/reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(review) {\r",
									"        pm.expect(review).to.include.all.keys('_id', 'rating', 'comment', '__v');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Rating is a valid integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    responseData.forEach(review => {\r",
									"        pm.expect(review.rating).to.be.a('number').and.to.satisfy(Number.isInteger);\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}reviews",
							"host": [
								"{{base_url}}reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST/reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains a valid review object\", function () {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.property('_id');\r",
									"    pm.expect(response).to.have.property('rating');\r",
									"    pm.expect(response).to.have.property('comment');\r",
									"});\r",
									"\r",
									"// Save the review ID to the environment\r",
									"const response = pm.response.json();\r",
									"pm.environment.set(\"reviewId\", response._id);\r",
									"\r",
									"pm.test(\"Review ID saved to environment\", function () {\r",
									"    pm.expect(pm.environment.get(\"reviewId\")).to.exist;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n        \"rating\": 5,\r\n        \"comment\": \"Very nice pen\"\r\n    \r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "http://localhost:3001/api/"
		}
	]
}
